Python Fundamentals
===================
REPL (Read-Eval-Print-Loop)

>>> REPL

>>> _ 
15
Recently printed value

>>> _ + 5
20

The above useful trick only works in REPL.

>>> print("Welcome to Python 3")
Welcome to Python 3

Python 3, print is a function call.

>>> for i in range(10):
...     x = i + 10
...     print(x)
... 
10
11
12
13
14
15
16
17
18
19
>>>


PEP: 8
======
Style Guide for Python Code

Python Standard Library
=======================
- Extensive standard library.
- The standard library is structured as modules.

- Gain access of these standard library is using import.
E.g. import <module_name>
import ctypes

>>> import math
>>> math.sqrt(49)
7.0
>>> 

>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help(math)

>>> help(math.factorial)
factorial(...)
    factorial(x) -> Integral
    
    Find x!. Raise a ValueError if x is negative or non-integral.
    
    
>>> math.factorial(10)
3628800

This function takes integer as an input and return integer as output.

>>> n = 10
>>> k = 7
>>> math.factorial(n) / (math.factorial(k) * math.factorial(n-k))
120.0

>>> from math import factorial 
>>> factorial(n) / (factorial(k) * factorial(n-k))
120.0

>>> from math import factorial as fac
>>> fac(n) / (fac(k) * fac(n-k))
120.0

>>> fac(n) // (fac(k) * fac(n-k))
120

>>> n = 100
>>> fac(100)
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

>>> len(str(fac(100)))
158

Scalar types and values
-----------------------
int => arbitrary precision integer
float => 64-bit floating point numbers
NoneType => the null object
{None}
bool => boolean logical values
{True, False}

int
---
unlimited precision signed integer
>>> 10
10
>>> 0b10
2
>>> 0o10
8
>>> 0x10
16
>>> int(3.5)
3
Note: Rounding is always towards zero.
>>> int(-3.6)
-3
>>> int("725")
725
>>> int("10000", 3)
81
81 is in decimal.

float
-----
IEEE-754 double precision (64-bit).
53 bits of binary precision.
15 to 16 bits of decimal precision.

>>> 4.256
4.256
>>> 3e8
300000000.0

>>> 1.616e-35
1.616e-35

>>> float(9)
9.0
float(): Constructor
>>> float("3.456")
3.456
>>> float("nan")
nan
>>> float("inf")
inf
>>> float("-inf")
-inf

Involving both int and float is promoted to a float.
>>> 4.0 + 8
12.0

None
----
The sole value of NoneType.
Often used to represent the absence of a value.
Not displayed by the REPL.

None is frequently used to represent the absence of a value. 
The python REPL never print None result.
>>> None
>>>

>>> x = None
>>> x is None
True

bool
----
Boolean logical value. 
Either True or False.
The bool type represents logical states and plays an important role in several of Python's control flow 
structures.

>>> True
True
>>> False
False

For integers, zero is considered falsey and all other values are truthy.
>>> bool(0)
False
>>> bool(12)
True
>>> bool(-1)
True
>>> 

Same behavior with float. 
>>> bool(0.0)
False
>>> bool(1.2)
True
>>> bool(-1.2)
True

when converting from collections, such as strings or lists, only empty collections are treated as 
falsey.

>>> bool([])
False
>>> bool([1,'a'])
True
>>>


