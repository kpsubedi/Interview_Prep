1. Difference Between String, StringBuffer, StringBuilder
==> (Storage Area, Modifiable, Thread Safe, Performance)
String: Constant String Pool, No (immutable), Yes, Fast
StringBuffer: Heap, Yes (Mutable), Yes, Very Slow
StringBuilder: Heap, Yes (Mutable), No, Fast

Note: Thread Safe data structures are slow

2. Difference between ArrayList and Vector.

ArrayList==> not synchronized, fast, increases its size by 50% 
doesnot define the increment size, Enumeration and Iterator.

Vector==> synchronized, slow, double the size, define increment size, Iterator.

3. Synchronized: this keyword to the method, we force every thread to wait for 
its turn before it can enter the method.

4. Iterators and Enumerators

Iterators==> Allow to remove elements from the underlying collection:
remove()

E.g. List<String> linkList = new LinkedList<String>();
linkList.add("Sample1");
linkList.add("Sample2");
linkList.add("Sample3");
linkList.add("Sample4");
linkList.add("Sample5");
linkList.add("Sample6");

Iterator<String> iterList = linkList.iterator();

while(iterList.hasNext()){
    if(((String)iterList.next()).equals("Sample1")){
	iterList.remove();
	}
    }

Enumerator==> Doesn't allow element to remove.

Enumeration<String> enumList = Collections.enumeration(linkList);

while(enumList.hasMoreElements()){
	System.out.println("...");
	}
5. Write code to find first non-repeated character in the String?
===>
Logic: As we know a non-repeated character occurs only once in the string.

a. First create the character cound hash table.
    For each character 
        if there is no value stored in the character set it to 1.
        else increment the value of the character by 1
b. Scan the given string
    for each character 
         return character if the count in hash table is 1.
         if no character have count 1, return null

6. What is singleton? Is it better to make whole method synchronized or only critical section synchronized?
===>
Singleton class with just one instance in whole Java application. java.lang.Runtime() is singleton class.
Singleton class JavaDemo. It means only one and only one instance of JavaDemo class we can have at and 
point of execution in the application code. 
a. We would create a static variable so that it can hold one single instance of our class.
E.g. private static JavaDemoSingleton uniqueInstnace;

b. We should declare the constructor private so that only class itself can instantiate the object.
Outside classes willnot be able to see the class constructor.

private JavaDemoSingleton(){...}

c. Then the main work to write the method which returns the instance of class, let the name of the method be 
getInstance()

public class JavaDemoSingleton {
    private static JavaDemoSingleton uniqueInstance;

private JavaDemoSingleton(){...}

public static synchronized JavaDemoSingleton getInstance(){
	if(uniqueInstance == null){
		uniqueInstance = new JavaDemoSingleton();
		}
	return uniqueInstance;
    }
}

** Lazy Initialization 
** Early Initialization

public class JavaDemoSingleton {
    private static volatile JavaDemoSingleton uniqueInstance;

private JavaDemoSingleton(){...}

public static JavaDemoSingleton getInstance(){
    if(uniqueInstance == null){
        synchronized(JavaDemoSingleton.class){
		if(uniqueInstance==null){
			uniqueInstance = new JavaDemoSingleton();
		}
	}
    }
}
}

	



